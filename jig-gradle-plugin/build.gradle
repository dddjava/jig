plugins {
    id 'jig.java-conventions'
    id 'java-gradle-plugin'
    id 'maven-publish'
    alias libs.plugins.gradle.plugin.publish
    id 'groovy'
}

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

def functionalTest = sourceSets.create("functionalTest")

dependencies {
    implementation project(':jig-core')
    runtimeOnly libs.log4j.to.slf4j

    testImplementation libs.junit

    functionalTestImplementation(project)
    functionalTestImplementation(libs.junit)
    functionalTestImplementation(libs.spock)
}

def functionalTestTask = tasks.register("functionalTest", Test) {
    description = "プラグインを適用した実際のビルドをシミュレートしてプラグインとしての動作を検証する"
    group = "verification"
    testClassesDirs = functionalTest.output.classesDirs
    classpath = functionalTest.runtimeClasspath
    useJUnitPlatform()
    mustRunAfter(tasks.named('test'))
}
tasks.named('check') {
    dependsOn(functionalTestTask)
}


jar {
    archiveFileName = archiveBaseName.get() + "." + archiveExtension.get()
}

gradlePlugin {
    website = 'https://github.com/dddjava/jig'
    vcsUrl = 'https://github.com/dddjava/jig.git'

    plugins {
        jigGradlePlugin {
            id = "org.dddjava.${project.name}"
            implementationClass = 'org.dddjava.jig.gradle.JigGradlePlugin'
            displayName = 'JIG Gradle Plugin'
            description = 'Visualizing code for DDD'
            tags.set(['ddd', 'visualize'])
        }
    }
    testSourceSets(sourceSets.functionalTest)
}

publishing {
    publications {
        puluginPublication(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
        }
    }
}

task setupPluginUpload doLast {
    final def KEY_PROPERTY = "gradle.publish.key"
    final def SECRET_PROPERTY = "gradle.publish.secret"

    String key = findSettingValue('GRADLE_PUBLISH_KEY', KEY_PROPERTY)
    String secret = findSettingValue('GRADLE_PUBLISH_SECRET', SECRET_PROPERTY)

    if (key.isEmpty() || secret.isEmpty()) {
        throw new RuntimeException("GRADLE_PUBLISH_KEY and/or GRADLE_PUBLISH_SECRET are not defined environment variables")
    }

    System.properties.setProperty(KEY_PROPERTY, key)
    System.properties.setProperty(SECRET_PROPERTY, secret)
}

tasks.publishPlugins.dependsOn tasks.setupPluginUpload
build.dependsOn(publishToMavenLocal)

test.dependsOn(createClasspathManifest)

static String findSettingValue(String envName, String propertyName) {
    def env = System.getenv().get(envName)
    def property = env ? env : System.properties.getProperty(propertyName)
    property ? property : ''
}
